syntax = "proto3";
package babylon.checkpointing.v1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "babylon/checkpointing/v1/bls_key.proto";
import "babylon/checkpointing/v1/checkpoint.proto";
import "cosmos/staking/v1beta1/tx.proto";
import "cosmos/msg/v1/msg.proto";
import "tendermint/abci/types.proto";

option go_package = "github.com/babylonlabs-io/babylon/x/checkpointing/types";

// Msg defines the checkpointing Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // WrappedCreateValidator defines a method for registering a new validator
  rpc WrappedCreateValidator(MsgWrappedCreateValidator)
      returns (MsgWrappedCreateValidatorResponse);

  // InjectedCheckpoint defines a dummy method for handling an injected checkpoint
  rpc InjectedCheckpoint(MsgInjectedCheckpoint)
      returns (MsgInjectedCheckpointResponse);
}

// MsgWrappedCreateValidator defines a wrapped message to create a validator
message MsgWrappedCreateValidator {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (cosmos.msg.v1.signer) = "msg_create_validator";

  BlsKey key = 1;
  cosmos.staking.v1beta1.MsgCreateValidator msg_create_validator = 2;
}

// MsgWrappedCreateValidatorResponse defines the MsgWrappedCreateValidator
// response type
message MsgWrappedCreateValidatorResponse {}

// MsgInjectedCheckpoint wraps the checkpoint and the extended votes
// Note: this is a special message type that is only for internal ABCI++ usage
// for inserting checkpoint into the block
message MsgInjectedCheckpoint {
  option (cosmos.msg.v1.signer) = "placeholder_addr";

  // placeholder_addr is the placeholder address requested by
  // cosmos sdk as a message; this message in an internal message
  // which only be handled in PreBlocker
  string placeholder_addr = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  RawCheckpointWithMeta ckpt = 2;
  // extended_commit_info is the commit info including the vote extensions
  // from the previous proposal
  tendermint.abci.ExtendedCommitInfo extended_commit_info = 3;
}

// MsgInjectedCheckpointResponse defines the MsgInjectedCheckpoint
// response type
message MsgInjectedCheckpointResponse {}
