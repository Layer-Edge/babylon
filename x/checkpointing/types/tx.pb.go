// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/checkpointing/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cometbft/cometbft/abci/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	types1 "github.com/cosmos/cosmos-sdk/x/staking/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgInjectedCheckpoint wraps the checkpoint and the extended votes
// Note: this is a special message type that is only for internal ABCI++ usage
// for inserting checkpoint into the block
type MsgInjectedCheckpoint struct {
	Ckpt *RawCheckpointWithMeta `protobuf:"bytes,1,opt,name=ckpt,proto3" json:"ckpt,omitempty"`
	// extended_commit_info is the commit info including the vote extensions
	// from the previous proposal
	ExtendedCommitInfo *types.ExtendedCommitInfo `protobuf:"bytes,2,opt,name=extended_commit_info,json=extendedCommitInfo,proto3" json:"extended_commit_info,omitempty"`
}

func (m *MsgInjectedCheckpoint) Reset()         { *m = MsgInjectedCheckpoint{} }
func (m *MsgInjectedCheckpoint) String() string { return proto.CompactTextString(m) }
func (*MsgInjectedCheckpoint) ProtoMessage()    {}
func (*MsgInjectedCheckpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b16c54750152c21, []int{0}
}
func (m *MsgInjectedCheckpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInjectedCheckpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInjectedCheckpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInjectedCheckpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInjectedCheckpoint.Merge(m, src)
}
func (m *MsgInjectedCheckpoint) XXX_Size() int {
	return m.Size()
}
func (m *MsgInjectedCheckpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInjectedCheckpoint.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInjectedCheckpoint proto.InternalMessageInfo

func (m *MsgInjectedCheckpoint) GetCkpt() *RawCheckpointWithMeta {
	if m != nil {
		return m.Ckpt
	}
	return nil
}

func (m *MsgInjectedCheckpoint) GetExtendedCommitInfo() *types.ExtendedCommitInfo {
	if m != nil {
		return m.ExtendedCommitInfo
	}
	return nil
}

// Internal response for MsgInjectedCheckpoint
type MsgInjectedCheckpointResponse struct {
}

func (m *MsgInjectedCheckpointResponse) Reset()         { *m = MsgInjectedCheckpointResponse{} }
func (m *MsgInjectedCheckpointResponse) String() string { return proto.CompactTextString(m) }
func (*MsgInjectedCheckpointResponse) ProtoMessage()    {}
func (*MsgInjectedCheckpointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b16c54750152c21, []int{1}
}
func (m *MsgInjectedCheckpointResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInjectedCheckpointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInjectedCheckpointResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInjectedCheckpointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInjectedCheckpointResponse.Merge(m, src)
}
func (m *MsgInjectedCheckpointResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgInjectedCheckpointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInjectedCheckpointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInjectedCheckpointResponse proto.InternalMessageInfo

// MsgWrappedCreateValidator defines a wrapped message to create a validator
type MsgWrappedCreateValidator struct {
	Key                *BlsKey                    `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	MsgCreateValidator *types1.MsgCreateValidator `protobuf:"bytes,2,opt,name=msg_create_validator,json=msgCreateValidator,proto3" json:"msg_create_validator,omitempty"`
}

func (m *MsgWrappedCreateValidator) Reset()         { *m = MsgWrappedCreateValidator{} }
func (m *MsgWrappedCreateValidator) String() string { return proto.CompactTextString(m) }
func (*MsgWrappedCreateValidator) ProtoMessage()    {}
func (*MsgWrappedCreateValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b16c54750152c21, []int{2}
}
func (m *MsgWrappedCreateValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWrappedCreateValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWrappedCreateValidator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWrappedCreateValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWrappedCreateValidator.Merge(m, src)
}
func (m *MsgWrappedCreateValidator) XXX_Size() int {
	return m.Size()
}
func (m *MsgWrappedCreateValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWrappedCreateValidator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWrappedCreateValidator proto.InternalMessageInfo

// MsgWrappedCreateValidatorResponse defines the MsgWrappedCreateValidator
// response type
type MsgWrappedCreateValidatorResponse struct {
}

func (m *MsgWrappedCreateValidatorResponse) Reset()         { *m = MsgWrappedCreateValidatorResponse{} }
func (m *MsgWrappedCreateValidatorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWrappedCreateValidatorResponse) ProtoMessage()    {}
func (*MsgWrappedCreateValidatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b16c54750152c21, []int{3}
}
func (m *MsgWrappedCreateValidatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWrappedCreateValidatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWrappedCreateValidatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWrappedCreateValidatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWrappedCreateValidatorResponse.Merge(m, src)
}
func (m *MsgWrappedCreateValidatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWrappedCreateValidatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWrappedCreateValidatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWrappedCreateValidatorResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgInjectedCheckpoint)(nil), "babylon.checkpointing.v1.MsgInjectedCheckpoint")
	proto.RegisterType((*MsgInjectedCheckpointResponse)(nil), "babylon.checkpointing.v1.MsgInjectedCheckpointResponse")
	proto.RegisterType((*MsgWrappedCreateValidator)(nil), "babylon.checkpointing.v1.MsgWrappedCreateValidator")
	proto.RegisterType((*MsgWrappedCreateValidatorResponse)(nil), "babylon.checkpointing.v1.MsgWrappedCreateValidatorResponse")
}

func init() { proto.RegisterFile("babylon/checkpointing/v1/tx.proto", fileDescriptor_6b16c54750152c21) }

var fileDescriptor_6b16c54750152c21 = []byte{
	// 496 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xcf, 0x8b, 0xd3, 0x40,
	0x14, 0x4e, 0x76, 0xd5, 0xc3, 0x78, 0x1b, 0xaa, 0xd6, 0x88, 0xe9, 0xb6, 0x0b, 0xa2, 0x05, 0x67,
	0xd8, 0xee, 0x61, 0x41, 0x6f, 0x5b, 0x3c, 0x2c, 0x92, 0x83, 0x01, 0x5d, 0x10, 0x21, 0x4c, 0x92,
	0xd9, 0xe9, 0x98, 0x1f, 0x13, 0x32, 0x63, 0x6d, 0x2e, 0x22, 0x9e, 0xc4, 0x93, 0x57, 0x6f, 0xfb,
	0x27, 0x2c, 0xf8, 0x4f, 0x78, 0xec, 0xd1, 0xa3, 0xb4, 0x87, 0xf5, 0xcf, 0x90, 0x4e, 0x27, 0x16,
	0xdb, 0x46, 0xd0, 0xdb, 0xf4, 0xbd, 0xef, 0xfb, 0xde, 0xf7, 0xf5, 0xe5, 0x81, 0x6e, 0x48, 0xc2,
	0x2a, 0x15, 0x39, 0x8e, 0x46, 0x34, 0x4a, 0x0a, 0xc1, 0x73, 0xc5, 0x73, 0x86, 0xc7, 0x07, 0x58,
	0x4d, 0x50, 0x51, 0x0a, 0x25, 0x60, 0xdb, 0x40, 0xd0, 0x1f, 0x10, 0x34, 0x3e, 0x70, 0xee, 0x35,
	0x92, 0xc3, 0x54, 0x06, 0x09, 0xad, 0x96, 0x0a, 0xce, 0x83, 0x46, 0xdc, 0xaa, 0x60, 0xa0, 0xb7,
	0x22, 0x21, 0x33, 0x21, 0x71, 0x26, 0x75, 0x3f, 0x93, 0xcc, 0x34, 0x3a, 0xa6, 0x21, 0x15, 0x49,
	0x96, 0xe4, 0x90, 0x2a, 0xb2, 0xb2, 0xe9, 0xb4, 0x98, 0x60, 0x42, 0x3f, 0xf1, 0xe2, 0x65, 0xaa,
	0x77, 0x14, 0xcd, 0x63, 0x5a, 0x66, 0x3c, 0x57, 0x98, 0x84, 0x11, 0xc7, 0xaa, 0x2a, 0xa8, 0x5c,
	0x36, 0x7b, 0x5f, 0x6d, 0x70, 0xc3, 0x93, 0xec, 0x24, 0x7f, 0x4d, 0x23, 0x45, 0xe3, 0xe1, 0x6f,
	0x33, 0x70, 0x08, 0xae, 0x44, 0x49, 0xa1, 0xda, 0xf6, 0x9e, 0x7d, 0xff, 0xfa, 0x00, 0xa3, 0xa6,
	0xbf, 0x00, 0xf9, 0xe4, 0xed, 0x8a, 0x76, 0xca, 0xd5, 0xc8, 0xa3, 0x8a, 0xf8, 0x9a, 0x0c, 0x9f,
	0x83, 0x16, 0x9d, 0xe8, 0xf9, 0x71, 0x10, 0x89, 0x2c, 0xe3, 0x2a, 0xe0, 0xf9, 0x99, 0x68, 0xef,
	0x68, 0xd1, 0x7d, 0xb4, 0xb2, 0x86, 0x16, 0xd6, 0xd0, 0x13, 0x03, 0x1e, 0x6a, 0xec, 0x49, 0x7e,
	0x26, 0x7c, 0x48, 0x37, 0x6a, 0xbd, 0x0e, 0xb8, 0xbb, 0xd5, 0xb4, 0x4f, 0x65, 0x21, 0x72, 0x49,
	0x7b, 0x53, 0x1b, 0xdc, 0xf6, 0x24, 0x3b, 0x2d, 0x49, 0x51, 0xd0, 0x78, 0x58, 0x52, 0xa2, 0xe8,
	0x0b, 0x92, 0xf2, 0x98, 0x28, 0x51, 0xc2, 0x01, 0xd8, 0x4d, 0x68, 0x65, 0x92, 0xed, 0x35, 0x27,
	0x3b, 0x4e, 0xe5, 0x53, 0x5a, 0xf9, 0x0b, 0x30, 0x7c, 0x05, 0x5a, 0x99, 0x64, 0x41, 0xa4, 0xa5,
	0x82, 0x71, 0xad, 0x65, 0x92, 0xf4, 0xd1, 0x72, 0x37, 0xc8, 0xec, 0x06, 0x99, 0xdd, 0x20, 0x4f,
	0xb2, 0xb5, 0xe9, 0x3e, 0xcc, 0x36, 0x6a, 0x8f, 0xba, 0x1f, 0xcf, 0x3b, 0xd6, 0xcf, 0xf3, 0x8e,
	0xf5, 0xe1, 0xf2, 0xa2, 0xbf, 0x75, 0x50, 0x6f, 0x1f, 0x74, 0x1b, 0x13, 0xd5, 0xb9, 0x07, 0x5f,
	0x76, 0xc0, 0xae, 0x27, 0x19, 0xfc, 0x64, 0x83, 0x9b, 0x0d, 0xe1, 0x0f, 0x9b, 0xf3, 0x36, 0xea,
	0x3b, 0x8f, 0xff, 0x83, 0x54, 0x9b, 0x82, 0xef, 0x00, 0xdc, 0xf2, 0x7d, 0xe1, 0xbf, 0x4a, 0x6e,
	0x12, 0x9c, 0xa3, 0x7f, 0x24, 0xd4, 0xf3, 0x9d, 0xab, 0xef, 0x2f, 0x2f, 0xfa, 0xf6, 0xf1, 0xb3,
	0x6f, 0x33, 0xd7, 0x9e, 0xce, 0x5c, 0xfb, 0xc7, 0xcc, 0xb5, 0x3f, 0xcf, 0x5d, 0x6b, 0x3a, 0x77,
	0xad, 0xef, 0x73, 0xd7, 0x7a, 0x79, 0xc4, 0xb8, 0x1a, 0xbd, 0x09, 0x51, 0x24, 0x32, 0x6c, 0x66,
	0xa4, 0x24, 0x94, 0x0f, 0xb9, 0xa8, 0x7f, 0xe2, 0xc9, 0xda, 0xe1, 0xea, 0x1b, 0x0a, 0xaf, 0xe9,
	0x23, 0x3a, 0xfc, 0x15, 0x00, 0x00, 0xff, 0xff, 0x25, 0x91, 0x69, 0x4a, 0x43, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// WrappedCreateValidator defines a method for registering a new validator
	WrappedCreateValidator(ctx context.Context, in *MsgWrappedCreateValidator, opts ...grpc.CallOption) (*MsgWrappedCreateValidatorResponse, error)
	InjectedCheckpoint(ctx context.Context, in *MsgInjectedCheckpoint, opts ...grpc.CallOption) (*MsgInjectedCheckpointResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) WrappedCreateValidator(ctx context.Context, in *MsgWrappedCreateValidator, opts ...grpc.CallOption) (*MsgWrappedCreateValidatorResponse, error) {
	out := new(MsgWrappedCreateValidatorResponse)
	err := c.cc.Invoke(ctx, "/babylon.checkpointing.v1.Msg/WrappedCreateValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) InjectedCheckpoint(ctx context.Context, in *MsgInjectedCheckpoint, opts ...grpc.CallOption) (*MsgInjectedCheckpointResponse, error) {
	out := new(MsgInjectedCheckpointResponse)
	err := c.cc.Invoke(ctx, "/babylon.checkpointing.v1.Msg/InjectedCheckpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// WrappedCreateValidator defines a method for registering a new validator
	WrappedCreateValidator(context.Context, *MsgWrappedCreateValidator) (*MsgWrappedCreateValidatorResponse, error)
	InjectedCheckpoint(context.Context, *MsgInjectedCheckpoint) (*MsgInjectedCheckpointResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) WrappedCreateValidator(ctx context.Context, req *MsgWrappedCreateValidator) (*MsgWrappedCreateValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrappedCreateValidator not implemented")
}
func (*UnimplementedMsgServer) InjectedCheckpoint(ctx context.Context, req *MsgInjectedCheckpoint) (*MsgInjectedCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InjectedCheckpoint not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_WrappedCreateValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWrappedCreateValidator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WrappedCreateValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.checkpointing.v1.Msg/WrappedCreateValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WrappedCreateValidator(ctx, req.(*MsgWrappedCreateValidator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_InjectedCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInjectedCheckpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InjectedCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.checkpointing.v1.Msg/InjectedCheckpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InjectedCheckpoint(ctx, req.(*MsgInjectedCheckpoint))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "babylon.checkpointing.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WrappedCreateValidator",
			Handler:    _Msg_WrappedCreateValidator_Handler,
		},
		{
			MethodName: "InjectedCheckpoint",
			Handler:    _Msg_InjectedCheckpoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "babylon/checkpointing/v1/tx.proto",
}

func (m *MsgInjectedCheckpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInjectedCheckpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInjectedCheckpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExtendedCommitInfo != nil {
		{
			size, err := m.ExtendedCommitInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Ckpt != nil {
		{
			size, err := m.Ckpt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInjectedCheckpointResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInjectedCheckpointResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInjectedCheckpointResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWrappedCreateValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWrappedCreateValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWrappedCreateValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MsgCreateValidator != nil {
		{
			size, err := m.MsgCreateValidator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWrappedCreateValidatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWrappedCreateValidatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWrappedCreateValidatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgInjectedCheckpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ckpt != nil {
		l = m.Ckpt.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ExtendedCommitInfo != nil {
		l = m.ExtendedCommitInfo.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgInjectedCheckpointResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWrappedCreateValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MsgCreateValidator != nil {
		l = m.MsgCreateValidator.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWrappedCreateValidatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgInjectedCheckpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInjectedCheckpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInjectedCheckpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ckpt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ckpt == nil {
				m.Ckpt = &RawCheckpointWithMeta{}
			}
			if err := m.Ckpt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedCommitInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtendedCommitInfo == nil {
				m.ExtendedCommitInfo = &types.ExtendedCommitInfo{}
			}
			if err := m.ExtendedCommitInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInjectedCheckpointResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInjectedCheckpointResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInjectedCheckpointResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWrappedCreateValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWrappedCreateValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWrappedCreateValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &BlsKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgCreateValidator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgCreateValidator == nil {
				m.MsgCreateValidator = &types1.MsgCreateValidator{}
			}
			if err := m.MsgCreateValidator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWrappedCreateValidatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWrappedCreateValidatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWrappedCreateValidatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
